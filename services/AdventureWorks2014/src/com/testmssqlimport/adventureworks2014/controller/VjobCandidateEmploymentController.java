/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.testmssqlimport.adventureworks2014.service.VjobCandidateEmploymentService;
import org.joda.time.LocalDateTime;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.testmssqlimport.adventureworks2014.*;
import com.testmssqlimport.adventureworks2014.service.*;


/**
 * Controller object for domain model class VjobCandidateEmployment.
 * @see com.testmssqlimport.adventureworks2014.VjobCandidateEmployment
 */

@RestController(value = "AdventureWorks2014.VjobCandidateEmploymentController")
@Api(value = "/AdventureWorks2014/VjobCandidateEmployment", description = "Exposes APIs to work with VjobCandidateEmployment resource.")
@RequestMapping("/AdventureWorks2014/VjobCandidateEmployment")
public class VjobCandidateEmploymentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VjobCandidateEmploymentController.class);

	@Autowired
	@Qualifier("AdventureWorks2014.VjobCandidateEmploymentService")
	private VjobCandidateEmploymentService vjobCandidateEmploymentService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of VjobCandidateEmployment instances matching the search criteria.")
	public Page<VjobCandidateEmployment> findVjobCandidateEmployments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering VjobCandidateEmployments list");
		return vjobCandidateEmploymentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of VjobCandidateEmployment instances.")
	public Page<VjobCandidateEmployment> getVjobCandidateEmployments(Pageable pageable) {
		LOGGER.debug("Rendering VjobCandidateEmployments list");
		return vjobCandidateEmploymentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of VjobCandidateEmployment instances.")
	public Long countAllVjobCandidateEmployments() {
		LOGGER.debug("counting VjobCandidateEmployments");
		Long count = vjobCandidateEmploymentService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the VjobCandidateEmployment instance associated with the given composite-id.")
	public VjobCandidateEmployment getVjobCandidateEmployment( @RequestParam("jobCandidateId") Integer jobCandidateId, @RequestParam("emp_startDate") LocalDateTime emp_startDate, @RequestParam("emp_endDate") LocalDateTime emp_endDate, @RequestParam("emp_orgName") String emp_orgName, @RequestParam("emp_jobTitle") String emp_jobTitle, @RequestParam("emp_responsibility") String emp_responsibility, @RequestParam("emp_functionCategory") String emp_functionCategory, @RequestParam("emp_industryCategory") String emp_industryCategory, @RequestParam("emp_loc_countryRegion") String emp_loc_countryRegion, @RequestParam("emp_loc_state") String emp_loc_state, @RequestParam("emp_loc_city") String emp_loc_city)
	 throws EntityNotFoundException {
	    VjobCandidateEmploymentId temp = new VjobCandidateEmploymentId();
	    temp.setJobCandidateId(jobCandidateId);
	    temp.setEmp_startDate(emp_startDate);
	    temp.setEmp_endDate(emp_endDate);
	    temp.setEmp_orgName(emp_orgName);
	    temp.setEmp_jobTitle(emp_jobTitle);
	    temp.setEmp_responsibility(emp_responsibility);
	    temp.setEmp_functionCategory(emp_functionCategory);
	    temp.setEmp_industryCategory(emp_industryCategory);
	    temp.setEmp_loc_countryRegion(emp_loc_countryRegion);
	    temp.setEmp_loc_state(emp_loc_state);
	    temp.setEmp_loc_city(emp_loc_city);
		LOGGER.debug("Getting VjobCandidateEmployment with id: {}" , temp);
		VjobCandidateEmployment instance = vjobCandidateEmploymentService.findById(temp);
		LOGGER.debug("VjobCandidateEmployment details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the VjobCandidateEmployment instance associated with the given composite-id.")
	public boolean deleteVjobCandidateEmployment( @RequestParam("jobCandidateId") Integer jobCandidateId, @RequestParam("emp_startDate") LocalDateTime emp_startDate, @RequestParam("emp_endDate") LocalDateTime emp_endDate, @RequestParam("emp_orgName") String emp_orgName, @RequestParam("emp_jobTitle") String emp_jobTitle, @RequestParam("emp_responsibility") String emp_responsibility, @RequestParam("emp_functionCategory") String emp_functionCategory, @RequestParam("emp_industryCategory") String emp_industryCategory, @RequestParam("emp_loc_countryRegion") String emp_loc_countryRegion, @RequestParam("emp_loc_state") String emp_loc_state, @RequestParam("emp_loc_city") String emp_loc_city)throws EntityNotFoundException {
	    VjobCandidateEmploymentId temp = new VjobCandidateEmploymentId();
        temp.setJobCandidateId(jobCandidateId);
        temp.setEmp_startDate(emp_startDate);
        temp.setEmp_endDate(emp_endDate);
        temp.setEmp_orgName(emp_orgName);
        temp.setEmp_jobTitle(emp_jobTitle);
        temp.setEmp_responsibility(emp_responsibility);
        temp.setEmp_functionCategory(emp_functionCategory);
        temp.setEmp_industryCategory(emp_industryCategory);
        temp.setEmp_loc_countryRegion(emp_loc_countryRegion);
        temp.setEmp_loc_state(emp_loc_state);
        temp.setEmp_loc_city(emp_loc_city);
		LOGGER.debug("Deleting VjobCandidateEmployment with id: {}" , temp);
		VjobCandidateEmployment deleted = vjobCandidateEmploymentService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the VjobCandidateEmployment instance associated with the given composite-id.")
	public VjobCandidateEmployment editVjobCandidateEmployment( @RequestParam("jobCandidateId") Integer jobCandidateId, @RequestParam("emp_startDate") LocalDateTime emp_startDate, @RequestParam("emp_endDate") LocalDateTime emp_endDate, @RequestParam("emp_orgName") String emp_orgName, @RequestParam("emp_jobTitle") String emp_jobTitle, @RequestParam("emp_responsibility") String emp_responsibility, @RequestParam("emp_functionCategory") String emp_functionCategory, @RequestParam("emp_industryCategory") String emp_industryCategory, @RequestParam("emp_loc_countryRegion") String emp_loc_countryRegion, @RequestParam("emp_loc_state") String emp_loc_state, @RequestParam("emp_loc_city") String emp_loc_city, @RequestBody VjobCandidateEmployment instance) throws EntityNotFoundException {
	    VjobCandidateEmploymentId temp = new VjobCandidateEmploymentId();
         temp.setJobCandidateId(jobCandidateId);
         temp.setEmp_startDate(emp_startDate);
         temp.setEmp_endDate(emp_endDate);
         temp.setEmp_orgName(emp_orgName);
         temp.setEmp_jobTitle(emp_jobTitle);
         temp.setEmp_responsibility(emp_responsibility);
         temp.setEmp_functionCategory(emp_functionCategory);
         temp.setEmp_industryCategory(emp_industryCategory);
         temp.setEmp_loc_countryRegion(emp_loc_countryRegion);
         temp.setEmp_loc_state(emp_loc_state);
         temp.setEmp_loc_city(emp_loc_city);
        vjobCandidateEmploymentService.delete(temp);
        instance = vjobCandidateEmploymentService.create(instance);
	    LOGGER.debug("VjobCandidateEmployment details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new VjobCandidateEmployment instance.")
	public VjobCandidateEmployment createVjobCandidateEmployment(@RequestBody VjobCandidateEmployment instance) {
		LOGGER.debug("Create VjobCandidateEmployment with information: {}" , instance);
		instance = vjobCandidateEmploymentService.create(instance);
		LOGGER.debug("Created VjobCandidateEmployment with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setVjobCandidateEmploymentService(VjobCandidateEmploymentService service) {
		this.vjobCandidateEmploymentService = service;
	}
}

