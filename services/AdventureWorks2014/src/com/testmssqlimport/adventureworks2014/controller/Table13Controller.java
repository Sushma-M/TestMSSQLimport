/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.testmssqlimport.adventureworks2014.service.Table13Service;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.testmssqlimport.adventureworks2014.*;
import com.testmssqlimport.adventureworks2014.service.*;


/**
 * Controller object for domain model class Table13.
 * @see com.testmssqlimport.adventureworks2014.Table13
 */

@RestController(value = "AdventureWorks2014.Table13Controller")
@Api(value = "/AdventureWorks2014/Table13", description = "Exposes APIs to work with Table13 resource.")
@RequestMapping("/AdventureWorks2014/Table13")
public class Table13Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table13Controller.class);

	@Autowired
	@Qualifier("AdventureWorks2014.Table13Service")
	private Table13Service table13Service;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Table13 instances matching the search criteria.")
	public Page<Table13> findTable13s( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Table13s list");
		return table13Service.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Table13 instances.")
	public Page<Table13> getTable13s(Pageable pageable) {
		LOGGER.debug("Rendering Table13s list");
		return table13Service.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Table13 instances.")
	public Long countAllTable13s() {
		LOGGER.debug("counting Table13s");
		Long count = table13Service.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Table13 instance associated with the given id.")
    public Table13 getTable13(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table13 with id: {}" , id);
        Table13 instance = table13Service.findById(id);
        LOGGER.debug("Table13 details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Table13 instance associated with the given id.")
    public boolean deleteTable13(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table13 with id: {}" , id);
        Table13 deleted = table13Service.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Table13 instance associated with the given id.")
    public Table13 editTable13(@PathVariable("id") Integer id, @RequestBody Table13 instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Table13 with id: {}" , instance.getId());
        instance.setId(id);
        instance = table13Service.update(instance);
        LOGGER.debug("Table13 details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Table13 instance.")
	public Table13 createTable13(@RequestBody Table13 instance) {
		LOGGER.debug("Create Table13 with information: {}" , instance);
		instance = table13Service.create(instance);
		LOGGER.debug("Created Table13 with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTable13Service(Table13Service service) {
		this.table13Service = service;
	}
}

