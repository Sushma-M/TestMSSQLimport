/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.testmssqlimport.adventureworks2014.service.VemployeeDepartmentHistoryService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.testmssqlimport.adventureworks2014.*;
import com.testmssqlimport.adventureworks2014.service.*;


/**
 * Controller object for domain model class VemployeeDepartmentHistory.
 * @see com.testmssqlimport.adventureworks2014.VemployeeDepartmentHistory
 */

@RestController(value = "AdventureWorks2014.VemployeeDepartmentHistoryController")
@Api(value = "/AdventureWorks2014/VemployeeDepartmentHistory", description = "Exposes APIs to work with VemployeeDepartmentHistory resource.")
@RequestMapping("/AdventureWorks2014/VemployeeDepartmentHistory")
public class VemployeeDepartmentHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VemployeeDepartmentHistoryController.class);

	@Autowired
	@Qualifier("AdventureWorks2014.VemployeeDepartmentHistoryService")
	private VemployeeDepartmentHistoryService vemployeeDepartmentHistoryService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of VemployeeDepartmentHistory instances matching the search criteria.")
	public Page<VemployeeDepartmentHistory> findVemployeeDepartmentHistorys( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering VemployeeDepartmentHistorys list");
		return vemployeeDepartmentHistoryService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of VemployeeDepartmentHistory instances.")
	public Page<VemployeeDepartmentHistory> getVemployeeDepartmentHistorys(Pageable pageable) {
		LOGGER.debug("Rendering VemployeeDepartmentHistorys list");
		return vemployeeDepartmentHistoryService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of VemployeeDepartmentHistory instances.")
	public Long countAllVemployeeDepartmentHistorys() {
		LOGGER.debug("counting VemployeeDepartmentHistorys");
		Long count = vemployeeDepartmentHistoryService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the VemployeeDepartmentHistory instance associated with the given composite-id.")
	public VemployeeDepartmentHistory getVemployeeDepartmentHistory( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("title") String title, @RequestParam("firstName") String firstName, @RequestParam("middleName") String middleName, @RequestParam("lastName") String lastName, @RequestParam("suffix") String suffix, @RequestParam("shift") String shift, @RequestParam("department") String department, @RequestParam("groupName") String groupName, @RequestParam("startDate") Date startDate, @RequestParam("endDate") Date endDate)
	 throws EntityNotFoundException {
	    VemployeeDepartmentHistoryId temp = new VemployeeDepartmentHistoryId();
	    temp.setBusinessEntityId(businessEntityId);
	    temp.setTitle(title);
	    temp.setFirstName(firstName);
	    temp.setMiddleName(middleName);
	    temp.setLastName(lastName);
	    temp.setSuffix(suffix);
	    temp.setShift(shift);
	    temp.setDepartment(department);
	    temp.setGroupName(groupName);
	    temp.setStartDate(startDate);
	    temp.setEndDate(endDate);
		LOGGER.debug("Getting VemployeeDepartmentHistory with id: {}" , temp);
		VemployeeDepartmentHistory instance = vemployeeDepartmentHistoryService.findById(temp);
		LOGGER.debug("VemployeeDepartmentHistory details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the VemployeeDepartmentHistory instance associated with the given composite-id.")
	public boolean deleteVemployeeDepartmentHistory( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("title") String title, @RequestParam("firstName") String firstName, @RequestParam("middleName") String middleName, @RequestParam("lastName") String lastName, @RequestParam("suffix") String suffix, @RequestParam("shift") String shift, @RequestParam("department") String department, @RequestParam("groupName") String groupName, @RequestParam("startDate") Date startDate, @RequestParam("endDate") Date endDate)throws EntityNotFoundException {
	    VemployeeDepartmentHistoryId temp = new VemployeeDepartmentHistoryId();
        temp.setBusinessEntityId(businessEntityId);
        temp.setTitle(title);
        temp.setFirstName(firstName);
        temp.setMiddleName(middleName);
        temp.setLastName(lastName);
        temp.setSuffix(suffix);
        temp.setShift(shift);
        temp.setDepartment(department);
        temp.setGroupName(groupName);
        temp.setStartDate(startDate);
        temp.setEndDate(endDate);
		LOGGER.debug("Deleting VemployeeDepartmentHistory with id: {}" , temp);
		VemployeeDepartmentHistory deleted = vemployeeDepartmentHistoryService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the VemployeeDepartmentHistory instance associated with the given composite-id.")
	public VemployeeDepartmentHistory editVemployeeDepartmentHistory( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("title") String title, @RequestParam("firstName") String firstName, @RequestParam("middleName") String middleName, @RequestParam("lastName") String lastName, @RequestParam("suffix") String suffix, @RequestParam("shift") String shift, @RequestParam("department") String department, @RequestParam("groupName") String groupName, @RequestParam("startDate") Date startDate, @RequestParam("endDate") Date endDate, @RequestBody VemployeeDepartmentHistory instance) throws EntityNotFoundException {
	    VemployeeDepartmentHistoryId temp = new VemployeeDepartmentHistoryId();
         temp.setBusinessEntityId(businessEntityId);
         temp.setTitle(title);
         temp.setFirstName(firstName);
         temp.setMiddleName(middleName);
         temp.setLastName(lastName);
         temp.setSuffix(suffix);
         temp.setShift(shift);
         temp.setDepartment(department);
         temp.setGroupName(groupName);
         temp.setStartDate(startDate);
         temp.setEndDate(endDate);
        vemployeeDepartmentHistoryService.delete(temp);
        instance = vemployeeDepartmentHistoryService.create(instance);
	    LOGGER.debug("VemployeeDepartmentHistory details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new VemployeeDepartmentHistory instance.")
	public VemployeeDepartmentHistory createVemployeeDepartmentHistory(@RequestBody VemployeeDepartmentHistory instance) {
		LOGGER.debug("Create VemployeeDepartmentHistory with information: {}" , instance);
		instance = vemployeeDepartmentHistoryService.create(instance);
		LOGGER.debug("Created VemployeeDepartmentHistory with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setVemployeeDepartmentHistoryService(VemployeeDepartmentHistoryService service) {
		this.vemployeeDepartmentHistoryService = service;
	}
}

