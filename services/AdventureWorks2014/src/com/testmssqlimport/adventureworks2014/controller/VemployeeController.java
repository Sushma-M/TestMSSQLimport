/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.testmssqlimport.adventureworks2014.service.VemployeeService;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.testmssqlimport.adventureworks2014.*;
import com.testmssqlimport.adventureworks2014.service.*;


/**
 * Controller object for domain model class Vemployee.
 * @see com.testmssqlimport.adventureworks2014.Vemployee
 */

@RestController(value = "AdventureWorks2014.VemployeeController")
@Api(value = "/AdventureWorks2014/Vemployee", description = "Exposes APIs to work with Vemployee resource.")
@RequestMapping("/AdventureWorks2014/Vemployee")
public class VemployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VemployeeController.class);

	@Autowired
	@Qualifier("AdventureWorks2014.VemployeeService")
	private VemployeeService vemployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Vemployee instances matching the search criteria.")
	public Page<Vemployee> findVemployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Vemployees list");
		return vemployeeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Vemployee instances.")
	public Page<Vemployee> getVemployees(Pageable pageable) {
		LOGGER.debug("Rendering Vemployees list");
		return vemployeeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Vemployee instances.")
	public Long countAllVemployees() {
		LOGGER.debug("counting Vemployees");
		Long count = vemployeeService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the Vemployee instance associated with the given composite-id.")
	public Vemployee getVemployee( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("title") String title, @RequestParam("firstName") String firstName, @RequestParam("middleName") String middleName, @RequestParam("lastName") String lastName, @RequestParam("suffix") String suffix, @RequestParam("jobTitle") String jobTitle, @RequestParam("phoneNumber") String phoneNumber, @RequestParam("phoneNumberType") String phoneNumberType, @RequestParam("emailAddress") String emailAddress, @RequestParam("emailPromotion") Integer emailPromotion, @RequestParam("addressLine1") String addressLine1, @RequestParam("addressLine2") String addressLine2, @RequestParam("city") String city, @RequestParam("stateProvinceName") String stateProvinceName, @RequestParam("postalCode") String postalCode, @RequestParam("countryRegionName") String countryRegionName, @RequestParam("additionalContactInfo") String additionalContactInfo)
	 throws EntityNotFoundException {
	    VemployeeId temp = new VemployeeId();
	    temp.setBusinessEntityId(businessEntityId);
	    temp.setTitle(title);
	    temp.setFirstName(firstName);
	    temp.setMiddleName(middleName);
	    temp.setLastName(lastName);
	    temp.setSuffix(suffix);
	    temp.setJobTitle(jobTitle);
	    temp.setPhoneNumber(phoneNumber);
	    temp.setPhoneNumberType(phoneNumberType);
	    temp.setEmailAddress(emailAddress);
	    temp.setEmailPromotion(emailPromotion);
	    temp.setAddressLine1(addressLine1);
	    temp.setAddressLine2(addressLine2);
	    temp.setCity(city);
	    temp.setStateProvinceName(stateProvinceName);
	    temp.setPostalCode(postalCode);
	    temp.setCountryRegionName(countryRegionName);
	    temp.setAdditionalContactInfo(additionalContactInfo);
		LOGGER.debug("Getting Vemployee with id: {}" , temp);
		Vemployee instance = vemployeeService.findById(temp);
		LOGGER.debug("Vemployee details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the Vemployee instance associated with the given composite-id.")
	public boolean deleteVemployee( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("title") String title, @RequestParam("firstName") String firstName, @RequestParam("middleName") String middleName, @RequestParam("lastName") String lastName, @RequestParam("suffix") String suffix, @RequestParam("jobTitle") String jobTitle, @RequestParam("phoneNumber") String phoneNumber, @RequestParam("phoneNumberType") String phoneNumberType, @RequestParam("emailAddress") String emailAddress, @RequestParam("emailPromotion") Integer emailPromotion, @RequestParam("addressLine1") String addressLine1, @RequestParam("addressLine2") String addressLine2, @RequestParam("city") String city, @RequestParam("stateProvinceName") String stateProvinceName, @RequestParam("postalCode") String postalCode, @RequestParam("countryRegionName") String countryRegionName, @RequestParam("additionalContactInfo") String additionalContactInfo)throws EntityNotFoundException {
	    VemployeeId temp = new VemployeeId();
        temp.setBusinessEntityId(businessEntityId);
        temp.setTitle(title);
        temp.setFirstName(firstName);
        temp.setMiddleName(middleName);
        temp.setLastName(lastName);
        temp.setSuffix(suffix);
        temp.setJobTitle(jobTitle);
        temp.setPhoneNumber(phoneNumber);
        temp.setPhoneNumberType(phoneNumberType);
        temp.setEmailAddress(emailAddress);
        temp.setEmailPromotion(emailPromotion);
        temp.setAddressLine1(addressLine1);
        temp.setAddressLine2(addressLine2);
        temp.setCity(city);
        temp.setStateProvinceName(stateProvinceName);
        temp.setPostalCode(postalCode);
        temp.setCountryRegionName(countryRegionName);
        temp.setAdditionalContactInfo(additionalContactInfo);
		LOGGER.debug("Deleting Vemployee with id: {}" , temp);
		Vemployee deleted = vemployeeService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the Vemployee instance associated with the given composite-id.")
	public Vemployee editVemployee( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("title") String title, @RequestParam("firstName") String firstName, @RequestParam("middleName") String middleName, @RequestParam("lastName") String lastName, @RequestParam("suffix") String suffix, @RequestParam("jobTitle") String jobTitle, @RequestParam("phoneNumber") String phoneNumber, @RequestParam("phoneNumberType") String phoneNumberType, @RequestParam("emailAddress") String emailAddress, @RequestParam("emailPromotion") Integer emailPromotion, @RequestParam("addressLine1") String addressLine1, @RequestParam("addressLine2") String addressLine2, @RequestParam("city") String city, @RequestParam("stateProvinceName") String stateProvinceName, @RequestParam("postalCode") String postalCode, @RequestParam("countryRegionName") String countryRegionName, @RequestParam("additionalContactInfo") String additionalContactInfo, @RequestBody Vemployee instance) throws EntityNotFoundException {
	    VemployeeId temp = new VemployeeId();
         temp.setBusinessEntityId(businessEntityId);
         temp.setTitle(title);
         temp.setFirstName(firstName);
         temp.setMiddleName(middleName);
         temp.setLastName(lastName);
         temp.setSuffix(suffix);
         temp.setJobTitle(jobTitle);
         temp.setPhoneNumber(phoneNumber);
         temp.setPhoneNumberType(phoneNumberType);
         temp.setEmailAddress(emailAddress);
         temp.setEmailPromotion(emailPromotion);
         temp.setAddressLine1(addressLine1);
         temp.setAddressLine2(addressLine2);
         temp.setCity(city);
         temp.setStateProvinceName(stateProvinceName);
         temp.setPostalCode(postalCode);
         temp.setCountryRegionName(countryRegionName);
         temp.setAdditionalContactInfo(additionalContactInfo);
        vemployeeService.delete(temp);
        instance = vemployeeService.create(instance);
	    LOGGER.debug("Vemployee details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Vemployee instance.")
	public Vemployee createVemployee(@RequestBody Vemployee instance) {
		LOGGER.debug("Create Vemployee with information: {}" , instance);
		instance = vemployeeService.create(instance);
		LOGGER.debug("Created Vemployee with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setVemployeeService(VemployeeService service) {
		this.vemployeeService = service;
	}
}

