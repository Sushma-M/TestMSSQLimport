/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.testmssqlimport.adventureworks2014.service.VjobCandidateService;
import org.joda.time.LocalDateTime;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.testmssqlimport.adventureworks2014.*;
import com.testmssqlimport.adventureworks2014.service.*;


/**
 * Controller object for domain model class VjobCandidate.
 * @see com.testmssqlimport.adventureworks2014.VjobCandidate
 */

@RestController(value = "AdventureWorks2014.VjobCandidateController")
@Api(value = "/AdventureWorks2014/VjobCandidate", description = "Exposes APIs to work with VjobCandidate resource.")
@RequestMapping("/AdventureWorks2014/VjobCandidate")
public class VjobCandidateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VjobCandidateController.class);

	@Autowired
	@Qualifier("AdventureWorks2014.VjobCandidateService")
	private VjobCandidateService vjobCandidateService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of VjobCandidate instances matching the search criteria.")
	public Page<VjobCandidate> findVjobCandidates( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering VjobCandidates list");
		return vjobCandidateService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of VjobCandidate instances.")
	public Page<VjobCandidate> getVjobCandidates(Pageable pageable) {
		LOGGER.debug("Rendering VjobCandidates list");
		return vjobCandidateService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of VjobCandidate instances.")
	public Long countAllVjobCandidates() {
		LOGGER.debug("counting VjobCandidates");
		Long count = vjobCandidateService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the VjobCandidate instance associated with the given composite-id.")
	public VjobCandidate getVjobCandidate( @RequestParam("jobCandidateId") Integer jobCandidateId, @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("name_prefix") String name_prefix, @RequestParam("name_first") String name_first, @RequestParam("name_middle") String name_middle, @RequestParam("name_last") String name_last, @RequestParam("name_suffix") String name_suffix, @RequestParam("skills") String skills, @RequestParam("addr_type") String addr_type, @RequestParam("addr_loc_countryRegion") String addr_loc_countryRegion, @RequestParam("addr_loc_state") String addr_loc_state, @RequestParam("addr_loc_city") String addr_loc_city, @RequestParam("addr_postalCode") String addr_postalCode, @RequestParam("email") String email, @RequestParam("webSite") String webSite, @RequestParam("modifiedDate") LocalDateTime modifiedDate)
	 throws EntityNotFoundException {
	    VjobCandidateId temp = new VjobCandidateId();
	    temp.setJobCandidateId(jobCandidateId);
	    temp.setBusinessEntityId(businessEntityId);
	    temp.setName_prefix(name_prefix);
	    temp.setName_first(name_first);
	    temp.setName_middle(name_middle);
	    temp.setName_last(name_last);
	    temp.setName_suffix(name_suffix);
	    temp.setSkills(skills);
	    temp.setAddr_type(addr_type);
	    temp.setAddr_loc_countryRegion(addr_loc_countryRegion);
	    temp.setAddr_loc_state(addr_loc_state);
	    temp.setAddr_loc_city(addr_loc_city);
	    temp.setAddr_postalCode(addr_postalCode);
	    temp.setEmail(email);
	    temp.setWebSite(webSite);
	    temp.setModifiedDate(modifiedDate);
		LOGGER.debug("Getting VjobCandidate with id: {}" , temp);
		VjobCandidate instance = vjobCandidateService.findById(temp);
		LOGGER.debug("VjobCandidate details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the VjobCandidate instance associated with the given composite-id.")
	public boolean deleteVjobCandidate( @RequestParam("jobCandidateId") Integer jobCandidateId, @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("name_prefix") String name_prefix, @RequestParam("name_first") String name_first, @RequestParam("name_middle") String name_middle, @RequestParam("name_last") String name_last, @RequestParam("name_suffix") String name_suffix, @RequestParam("skills") String skills, @RequestParam("addr_type") String addr_type, @RequestParam("addr_loc_countryRegion") String addr_loc_countryRegion, @RequestParam("addr_loc_state") String addr_loc_state, @RequestParam("addr_loc_city") String addr_loc_city, @RequestParam("addr_postalCode") String addr_postalCode, @RequestParam("email") String email, @RequestParam("webSite") String webSite, @RequestParam("modifiedDate") LocalDateTime modifiedDate)throws EntityNotFoundException {
	    VjobCandidateId temp = new VjobCandidateId();
        temp.setJobCandidateId(jobCandidateId);
        temp.setBusinessEntityId(businessEntityId);
        temp.setName_prefix(name_prefix);
        temp.setName_first(name_first);
        temp.setName_middle(name_middle);
        temp.setName_last(name_last);
        temp.setName_suffix(name_suffix);
        temp.setSkills(skills);
        temp.setAddr_type(addr_type);
        temp.setAddr_loc_countryRegion(addr_loc_countryRegion);
        temp.setAddr_loc_state(addr_loc_state);
        temp.setAddr_loc_city(addr_loc_city);
        temp.setAddr_postalCode(addr_postalCode);
        temp.setEmail(email);
        temp.setWebSite(webSite);
        temp.setModifiedDate(modifiedDate);
		LOGGER.debug("Deleting VjobCandidate with id: {}" , temp);
		VjobCandidate deleted = vjobCandidateService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the VjobCandidate instance associated with the given composite-id.")
	public VjobCandidate editVjobCandidate( @RequestParam("jobCandidateId") Integer jobCandidateId, @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("name_prefix") String name_prefix, @RequestParam("name_first") String name_first, @RequestParam("name_middle") String name_middle, @RequestParam("name_last") String name_last, @RequestParam("name_suffix") String name_suffix, @RequestParam("skills") String skills, @RequestParam("addr_type") String addr_type, @RequestParam("addr_loc_countryRegion") String addr_loc_countryRegion, @RequestParam("addr_loc_state") String addr_loc_state, @RequestParam("addr_loc_city") String addr_loc_city, @RequestParam("addr_postalCode") String addr_postalCode, @RequestParam("email") String email, @RequestParam("webSite") String webSite, @RequestParam("modifiedDate") LocalDateTime modifiedDate, @RequestBody VjobCandidate instance) throws EntityNotFoundException {
	    VjobCandidateId temp = new VjobCandidateId();
         temp.setJobCandidateId(jobCandidateId);
         temp.setBusinessEntityId(businessEntityId);
         temp.setName_prefix(name_prefix);
         temp.setName_first(name_first);
         temp.setName_middle(name_middle);
         temp.setName_last(name_last);
         temp.setName_suffix(name_suffix);
         temp.setSkills(skills);
         temp.setAddr_type(addr_type);
         temp.setAddr_loc_countryRegion(addr_loc_countryRegion);
         temp.setAddr_loc_state(addr_loc_state);
         temp.setAddr_loc_city(addr_loc_city);
         temp.setAddr_postalCode(addr_postalCode);
         temp.setEmail(email);
         temp.setWebSite(webSite);
         temp.setModifiedDate(modifiedDate);
        vjobCandidateService.delete(temp);
        instance = vjobCandidateService.create(instance);
	    LOGGER.debug("VjobCandidate details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new VjobCandidate instance.")
	public VjobCandidate createVjobCandidate(@RequestBody VjobCandidate instance) {
		LOGGER.debug("Create VjobCandidate with information: {}" , instance);
		instance = vjobCandidateService.create(instance);
		LOGGER.debug("Created VjobCandidate with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setVjobCandidateService(VjobCandidateService service) {
		this.vjobCandidateService = service;
	}
}

