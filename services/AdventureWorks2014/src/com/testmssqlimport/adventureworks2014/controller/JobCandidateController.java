/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.testmssqlimport.adventureworks2014.service.JobCandidateService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.testmssqlimport.adventureworks2014.*;
import com.testmssqlimport.adventureworks2014.service.*;


/**
 * Controller object for domain model class JobCandidate.
 * @see com.testmssqlimport.adventureworks2014.JobCandidate
 */

@RestController(value = "AdventureWorks2014.JobCandidateController")
@Api(value = "/AdventureWorks2014/JobCandidate", description = "Exposes APIs to work with JobCandidate resource.")
@RequestMapping("/AdventureWorks2014/JobCandidate")
public class JobCandidateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobCandidateController.class);

	@Autowired
	@Qualifier("AdventureWorks2014.JobCandidateService")
	private JobCandidateService jobCandidateService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of JobCandidate instances matching the search criteria.")
	public Page<JobCandidate> findJobCandidates( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering JobCandidates list");
		return jobCandidateService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of JobCandidate instances.")
	public Page<JobCandidate> getJobCandidates(Pageable pageable) {
		LOGGER.debug("Rendering JobCandidates list");
		return jobCandidateService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of JobCandidate instances.")
	public Long countAllJobCandidates() {
		LOGGER.debug("counting JobCandidates");
		Long count = jobCandidateService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the JobCandidate instance associated with the given id.")
    public JobCandidate getJobCandidate(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting JobCandidate with id: {}" , id);
        JobCandidate instance = jobCandidateService.findById(id);
        LOGGER.debug("JobCandidate details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the JobCandidate instance associated with the given id.")
    public boolean deleteJobCandidate(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting JobCandidate with id: {}" , id);
        JobCandidate deleted = jobCandidateService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the JobCandidate instance associated with the given id.")
    public JobCandidate editJobCandidate(@PathVariable("id") Integer id, @RequestBody JobCandidate instance) throws EntityNotFoundException {
        LOGGER.debug("Editing JobCandidate with id: {}" , instance.getJobCandidateId());
        instance.setJobCandidateId(id);
        instance = jobCandidateService.update(instance);
        LOGGER.debug("JobCandidate details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new JobCandidate instance.")
	public JobCandidate createJobCandidate(@RequestBody JobCandidate instance) {
		LOGGER.debug("Create JobCandidate with information: {}" , instance);
		instance = jobCandidateService.create(instance);
		LOGGER.debug("Created JobCandidate with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setJobCandidateService(JobCandidateService service) {
		this.jobCandidateService = service;
	}
}

