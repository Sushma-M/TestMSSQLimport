/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.testmssqlimport.adventureworks2014.service.EmployeeDepartmentHistoryService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.testmssqlimport.adventureworks2014.*;
import com.testmssqlimport.adventureworks2014.service.*;


/**
 * Controller object for domain model class EmployeeDepartmentHistory.
 * @see com.testmssqlimport.adventureworks2014.EmployeeDepartmentHistory
 */

@RestController(value = "AdventureWorks2014.EmployeeDepartmentHistoryController")
@Api(value = "/AdventureWorks2014/EmployeeDepartmentHistory", description = "Exposes APIs to work with EmployeeDepartmentHistory resource.")
@RequestMapping("/AdventureWorks2014/EmployeeDepartmentHistory")
public class EmployeeDepartmentHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeDepartmentHistoryController.class);

	@Autowired
	@Qualifier("AdventureWorks2014.EmployeeDepartmentHistoryService")
	private EmployeeDepartmentHistoryService employeeDepartmentHistoryService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeDepartmentHistory instances matching the search criteria.")
	public Page<EmployeeDepartmentHistory> findEmployeeDepartmentHistorys( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeDepartmentHistorys list");
		return employeeDepartmentHistoryService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeDepartmentHistory instances.")
	public Page<EmployeeDepartmentHistory> getEmployeeDepartmentHistorys(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeDepartmentHistorys list");
		return employeeDepartmentHistoryService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeDepartmentHistory instances.")
	public Long countAllEmployeeDepartmentHistorys() {
		LOGGER.debug("counting EmployeeDepartmentHistorys");
		Long count = employeeDepartmentHistoryService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the EmployeeDepartmentHistory instance associated with the given composite-id.")
	public EmployeeDepartmentHistory getEmployeeDepartmentHistory( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("startDate") Date startDate, @RequestParam("departmentId") short departmentId, @RequestParam("shiftId") byte shiftId)
	 throws EntityNotFoundException {
	    EmployeeDepartmentHistoryId temp = new EmployeeDepartmentHistoryId();
	    temp.setBusinessEntityId(businessEntityId);
	    temp.setStartDate(startDate);
	    temp.setDepartmentId(departmentId);
	    temp.setShiftId(shiftId);
		LOGGER.debug("Getting EmployeeDepartmentHistory with id: {}" , temp);
		EmployeeDepartmentHistory instance = employeeDepartmentHistoryService.findById(temp);
		LOGGER.debug("EmployeeDepartmentHistory details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the EmployeeDepartmentHistory instance associated with the given composite-id.")
	public boolean deleteEmployeeDepartmentHistory( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("startDate") Date startDate, @RequestParam("departmentId") short departmentId, @RequestParam("shiftId") byte shiftId)throws EntityNotFoundException {
	    EmployeeDepartmentHistoryId temp = new EmployeeDepartmentHistoryId();
        temp.setBusinessEntityId(businessEntityId);
        temp.setStartDate(startDate);
        temp.setDepartmentId(departmentId);
        temp.setShiftId(shiftId);
		LOGGER.debug("Deleting EmployeeDepartmentHistory with id: {}" , temp);
		EmployeeDepartmentHistory deleted = employeeDepartmentHistoryService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the EmployeeDepartmentHistory instance associated with the given composite-id.")
	public EmployeeDepartmentHistory editEmployeeDepartmentHistory( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("startDate") Date startDate, @RequestParam("departmentId") short departmentId, @RequestParam("shiftId") byte shiftId, @RequestBody EmployeeDepartmentHistory instance) throws EntityNotFoundException {
	    EmployeeDepartmentHistoryId temp = new EmployeeDepartmentHistoryId();
         temp.setBusinessEntityId(businessEntityId);
         temp.setStartDate(startDate);
         temp.setDepartmentId(departmentId);
         temp.setShiftId(shiftId);
        employeeDepartmentHistoryService.delete(temp);
        instance = employeeDepartmentHistoryService.create(instance);
	    LOGGER.debug("EmployeeDepartmentHistory details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeDepartmentHistory instance.")
	public EmployeeDepartmentHistory createEmployeeDepartmentHistory(@RequestBody EmployeeDepartmentHistory instance) {
		LOGGER.debug("Create EmployeeDepartmentHistory with information: {}" , instance);
		instance = employeeDepartmentHistoryService.create(instance);
		LOGGER.debug("Created EmployeeDepartmentHistory with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeDepartmentHistoryService(EmployeeDepartmentHistoryService service) {
		this.employeeDepartmentHistoryService = service;
	}
}

