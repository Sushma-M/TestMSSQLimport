/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testmssqlimport.adventureworks2014.*;


/**
 * ServiceImpl object for domain model class EmployeePayHistory.
 * @see com.testmssqlimport.adventureworks2014.EmployeePayHistory
 */
@Service("AdventureWorks2014.EmployeePayHistoryService")
public class EmployeePayHistoryServiceImpl implements EmployeePayHistoryService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeePayHistoryServiceImpl.class);

    @Autowired
    @Qualifier("AdventureWorks2014.EmployeePayHistoryDao")
    private WMGenericDao<EmployeePayHistory, EmployeePayHistoryId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeePayHistory, EmployeePayHistoryId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
     public Page<EmployeePayHistory> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public EmployeePayHistory create(EmployeePayHistory employeepayhistory) {
        LOGGER.debug("Creating a new employeepayhistory with information: {}" , employeepayhistory);
        return this.wmGenericDao.create(employeepayhistory);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public EmployeePayHistory delete(EmployeePayHistoryId employeepayhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeepayhistory with id: {}" , employeepayhistoryId);
        EmployeePayHistory deleted = this.wmGenericDao.findById(employeepayhistoryId);
        if (deleted == null) {
            LOGGER.debug("No employeepayhistory found with id: {}" , employeepayhistoryId);
            throw new EntityNotFoundException(String.valueOf(employeepayhistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<EmployeePayHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeepayhistorys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<EmployeePayHistory> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeepayhistorys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public EmployeePayHistory findById(EmployeePayHistoryId id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeepayhistory by id: {}" , id);
        EmployeePayHistory employeepayhistory=this.wmGenericDao.findById(id);
        if(employeepayhistory==null){
            LOGGER.debug("No employeepayhistory found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeepayhistory;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public EmployeePayHistory update(EmployeePayHistory updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeepayhistory with information: {}" , updated);
        this.wmGenericDao.update(updated);

        EmployeePayHistoryId id = new EmployeePayHistoryId();
        id.setBusinessEntityId(updated.getBusinessEntityId());
        id.setRateChangeDate(updated.getRateChangeDate());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


