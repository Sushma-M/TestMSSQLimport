/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testmssqlimport.adventureworks2014.*;

/**
 * Service object for domain model class EmployeeDepartmentHistory.
 * @see com.testmssqlimport.adventureworks2014.EmployeeDepartmentHistory
 */

public interface EmployeeDepartmentHistoryService {
   /**
	 * Creates a new employeedepartmenthistory.
	 * 
	 * @param created
	 *            The information of the created employeedepartmenthistory.
	 * @return The created employeedepartmenthistory.
	 */
	public EmployeeDepartmentHistory create(EmployeeDepartmentHistory created);

	/**
	 * Deletes a employeedepartmenthistory.
	 * 
	 * @param employeedepartmenthistoryId
	 *            The id of the deleted employeedepartmenthistory.
	 * @return The deleted employeedepartmenthistory.
	 * @throws EntityNotFoundException
	 *             if no employeedepartmenthistory is found with the given id.
	 */
	public EmployeeDepartmentHistory delete(EmployeeDepartmentHistoryId employeedepartmenthistoryId) throws EntityNotFoundException;

	/**
	 * Finds all employeedepartmenthistorys.
	 * 
	 * @return A list of employeedepartmenthistorys.
	 */
	public Page<EmployeeDepartmentHistory> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeDepartmentHistory> findAll(Pageable pageable);
	
	/**
	 * Finds employeedepartmenthistory by id.
	 * 
	 * @param id
	 *            The id of the wanted employeedepartmenthistory.
	 * @return The found employeedepartmenthistory. If no employeedepartmenthistory is found, this method returns
	 *         null.
	 */
	public EmployeeDepartmentHistory findById(EmployeeDepartmentHistoryId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeedepartmenthistory.
	 * 
	 * @param updated
	 *            The information of the updated employeedepartmenthistory.
	 * @return The updated employeedepartmenthistory.
	 * @throws EntityNotFoundException
	 *             if no employeedepartmenthistory is found with given id.
	 */
	public EmployeeDepartmentHistory update(EmployeeDepartmentHistory updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeedepartmenthistorys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeedepartmenthistory.
	 */

	public long countAll();


    public Page<EmployeeDepartmentHistory> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

