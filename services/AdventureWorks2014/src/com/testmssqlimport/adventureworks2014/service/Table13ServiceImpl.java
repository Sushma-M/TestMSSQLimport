/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testmssqlimport.adventureworks2014.*;


/**
 * ServiceImpl object for domain model class Table13.
 * @see com.testmssqlimport.adventureworks2014.Table13
 */
@Service("AdventureWorks2014.Table13Service")
public class Table13ServiceImpl implements Table13Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Table13ServiceImpl.class);

    @Autowired
    @Qualifier("AdventureWorks2014.Table13Dao")
    private WMGenericDao<Table13, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table13, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
     public Page<Table13> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public Table13 create(Table13 table13) {
        LOGGER.debug("Creating a new table13 with information: {}" , table13);
        return this.wmGenericDao.create(table13);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public Table13 delete(Integer table13Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting table13 with id: {}" , table13Id);
        Table13 deleted = this.wmGenericDao.findById(table13Id);
        if (deleted == null) {
            LOGGER.debug("No table13 found with id: {}" , table13Id);
            throw new EntityNotFoundException(String.valueOf(table13Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Table13> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all table13s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<Table13> findAll(Pageable pageable) {
        LOGGER.debug("Finding all table13s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Table13 findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding table13 by id: {}" , id);
        Table13 table13=this.wmGenericDao.findById(id);
        if(table13==null){
            LOGGER.debug("No table13 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return table13;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public Table13 update(Table13 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating table13 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


