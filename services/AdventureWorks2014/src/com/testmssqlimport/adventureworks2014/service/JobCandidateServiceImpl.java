/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/

package com.testmssqlimport.adventureworks2014.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.testmssqlimport.adventureworks2014.*;


/**
 * ServiceImpl object for domain model class JobCandidate.
 * @see com.testmssqlimport.adventureworks2014.JobCandidate
 */
@Service("AdventureWorks2014.JobCandidateService")
public class JobCandidateServiceImpl implements JobCandidateService {


    private static final Logger LOGGER = LoggerFactory.getLogger(JobCandidateServiceImpl.class);

    @Autowired
    @Qualifier("AdventureWorks2014.JobCandidateDao")
    private WMGenericDao<JobCandidate, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JobCandidate, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
     public Page<JobCandidate> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AdventureWorks2014TransactionManager")
    @Override
    public JobCandidate create(JobCandidate jobcandidate) {
        LOGGER.debug("Creating a new jobcandidate with information: {}" , jobcandidate);
        return this.wmGenericDao.create(jobcandidate);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public JobCandidate delete(Integer jobcandidateId) throws EntityNotFoundException {
        LOGGER.debug("Deleting jobcandidate with id: {}" , jobcandidateId);
        JobCandidate deleted = this.wmGenericDao.findById(jobcandidateId);
        if (deleted == null) {
            LOGGER.debug("No jobcandidate found with id: {}" , jobcandidateId);
            throw new EntityNotFoundException(String.valueOf(jobcandidateId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<JobCandidate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all jobcandidates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public Page<JobCandidate> findAll(Pageable pageable) {
        LOGGER.debug("Finding all jobcandidates");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public JobCandidate findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding jobcandidate by id: {}" , id);
        JobCandidate jobcandidate=this.wmGenericDao.findById(id);
        if(jobcandidate==null){
            LOGGER.debug("No jobcandidate found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return jobcandidate;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AdventureWorks2014TransactionManager")
    @Override
    public JobCandidate update(JobCandidate updated) throws EntityNotFoundException {
        LOGGER.debug("Updating jobcandidate with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getJobCandidateId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AdventureWorks2014TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


